5)
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<omp.h>
int main() {
	int n, i;
	time_t st, et;
	st = clock();
	printf("Enter the number of students : ");
	scanf_s("%d", &n);
	double* arr = (double*)malloc(n * sizeof(double));
	double arr_max = 0;
	#pragma omp parallel for
	for (i = 0; i < n; i++) {
		srand(i);
		arr[i] = (double)(rand() % 10000)/10 ;
	}
	printf("CGPA of students : ");
	for (i = 0; i < n; i++)
		printf("%.2lf ", arr[i]);
	printf("\n");
	#pragma omp parallel for
	for (i = 0; i < n; i++) {
		#pragma omp critical
		if (arr_max < arr[i])
			arr_max = arr[i];
	}
	et = clock();
	printf("Student with highest CGPA = %.2lf\n", arr_max);
	printf("Time Taken : %.2lfms\n", ((double)(et - st) * 1000 / CLOCKS_PER_SEC));
}

6)

#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<omp.h>
void main() {
	int n;
	printf("Enter the dimension of square matrices : ");
	scanf_s("%d", &n);
	int i = 0, j = 0, k = 0;
	int** arr1 = (int**)malloc(n * sizeof(int*));
	int** arr2 = (int**)malloc(n * sizeof(int*));
	int** res = (int**)malloc(n * sizeof(int*));
	omp_set_num_threads(64);
	#pragma omp parallel private(j)
	{
		#pragma omp for
		for (i = 0; i < n; i++) {
			srand(i);
			arr1[i] = (int*)malloc(n * sizeof(int));
			arr2[i] = (int*)malloc(n * sizeof(int));
			res[i] = (int*)malloc(n * sizeof(int));
			for (j = 0; j < n; j++) {
				arr1[i][j] = rand() % 100;
				arr2[i][j] = rand() % 100;
			}
		}
	}
	time_t st, et;
	st = clock();
	#pragma omp parallel private(j,k)
	{
		#pragma omp for
		for (i = 0; i < n; i++) {
			for (j = 0; j < n; j++) {
				res[i][j] = 0;
				for (k = 0; k < n; k++)
					res[i][j] += arr1[i][k] * arr2[k][j];
			}
		}
	}
	et = clock();
	printf("Time taken by parallel algorithm : %lf\n", (double)(et - st) / CLOCKS_PER_SEC);
	st = clock();
	for (i = 0; i < n; i++) {
		for (j = 0; j < n; j++) {
			res[i][j] = 0;
			for (k = 0; k < n; k++)
				res[i][j] += arr1[i][k] * arr2[k][j];
		}
	}
	et = clock();
	printf("Time taken by Sequential algorithm : %lf\n", (double)(et - st) / CLOCKS_PER_SEC);
}