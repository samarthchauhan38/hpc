7)n robotas
#include<stdio.h>
#include<stdlib.h>
#include<mpi.h>
int main(int argc, char** argv)
{
    int rank, numproc;
    int sum = 0;
    int total_sum = 0;
    MPI_Init(&argc, &argv);
    MPI_Comm_size(MPI_COMM_WORLD, &numproc);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    srand(rank);
    sum = rand() % 100;
    printf("Robot %d picked %d mangoes.\n", rank, sum);
    MPI_Reduce(&sum, &total_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
    if (rank == 0)
        printf("Total Mangoes picked by %d Robots = %d\n", numproc, total_sum);
    MPI_Finalize();
}

################################################

8)MPI collective comunication
#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
int main(int argc, char* argv[])
{
	int size, rank;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	float recvbuf, sendbuf[100];
	if (rank == 0) {
		int i;
		printf("Before Scatter : sendbuf of rank 0 : ");
		for (i = 0; i < size; i++) {
			srand(i);
			sendbuf[i] = (float)(rand()%1000)/10;
			printf("%.1f ", sendbuf[i]);
		}
		printf("\nAfter Scatter :\n");
	}
	MPI_Scatter(sendbuf, 1, MPI_FLOAT, &recvbuf, 1, MPI_FLOAT, 0, MPI_COMM_WORLD);
	printf("rank= %d Recvbuf: %.1f\n", rank, recvbuf);
	MPI_Finalize();
}

##########################################
9)virtual topology
#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
#define SIZE 16
#define UP 0
#define DOWN 1
#define LEFT 2
#define RIGHT 3
int main(int argc, char* argv[])
{
	int numtasks, rank, source, dest, outbuf, i, tag = 1, inbuf[4] = { MPI_PROC_NULL,MPI_PROC_NULL,MPI_PROC_NULL,MPI_PROC_NULL, }, nbrs[4], dims[2] = { 4, 4 }, periods[2] = { 0, 0 }, reorder = 0, coords[2];
	MPI_Request reqs[8];
	MPI_Status stats[8];
	MPI_Comm cartcomm;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &numtasks);
	if (numtasks == SIZE) {
		MPI_Cart_create(MPI_COMM_WORLD, 2, dims, periods, reorder, &cartcomm);
		MPI_Comm_rank(cartcomm, &rank);
		MPI_Cart_coords(cartcomm, rank, 2, coords);
		MPI_Cart_shift(cartcomm, 0, 1, &nbrs[UP], &nbrs[DOWN]);
		MPI_Cart_shift(cartcomm, 1, 1, &nbrs[LEFT], &nbrs[RIGHT]);
		printf("rank= %d coords= %d %d neighbors(u,d,l,r)= %d %d %d %d\n", rank, coords[0], coords[1], nbrs[UP], nbrs[DOWN], nbrs[LEFT], nbrs[RIGHT]);
		outbuf = rank;
		for (i = 0; i < 4; i++) {
			dest = nbrs[i];
			source = nbrs[i];
			MPI_Isend(&outbuf, 1, MPI_INT, dest, tag, MPI_COMM_WORLD, &reqs[i]);
			MPI_Irecv(&inbuf[i], 1, MPI_INT, source, tag, MPI_COMM_WORLD, &reqs[i + 4]);
		}
		MPI_Waitall(8, reqs, stats);
		printf("rank= %d inbuf(u,d,l,r)= %d %d %d %d\n", rank, inbuf[UP], inbuf[DOWN], inbuf[LEFT], inbuf[RIGHT]);
	}
	else
		printf("Must specify %d tasks. Terminating.\n", SIZE);
	MPI_Finalize();
}
#######################################################################################

10)send/receive
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<mpi.h>
int main(int argc, char* argv[])
{
	int numtasks, rank, rc, count, next, prev, sz, inmsg;
	MPI_Status Stat;
	time_t st, et;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &numtasks);
	sz = (numtasks / 2) * 2;
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	st = clock();
	if (rank == 0) prev = sz - 1;
	else prev = rank - 1;
	if (rank == sz - 1) next = 0;
	else next = rank + 1;
	if (rank % 2 == 0 && rank < sz) {
		rc = MPI_Send(&rank, 1, MPI_INT, next, 0, MPI_COMM_WORLD);
		rc = MPI_Recv(&inmsg, 1, MPI_INT, prev, 1, MPI_COMM_WORLD, &Stat);
	}
	else if (rank % 2 == 1 && rank < sz) {
		rc = MPI_Recv(&inmsg, 1, MPI_INT, prev, 0, MPI_COMM_WORLD, &Stat);
		rc = MPI_Send(&rank, 1, MPI_INT, next, 1, MPI_COMM_WORLD);
	}
	MPI_Barrier(MPI_COMM_WORLD);
	et = clock();
	if(rank==0) printf("Time taken by Blocking send/receive : %lf\n", (double)(et - st) / CLOCKS_PER_SEC);
	MPI_Barrier(MPI_COMM_WORLD);
	MPI_Request reqs[2];
	MPI_Status stats[2];
	st = clock();
	if (rank == numtasks - 1) next = 0;
	else next = rank + 1;
	if (rank == 0) prev = numtasks - 1;
	else prev = rank - 1;
	MPI_Irecv(&inmsg, 1, MPI_INT, prev, 0, MPI_COMM_WORLD, &reqs[0]);
	MPI_Isend(&rank, 1, MPI_INT, next, 0, MPI_COMM_WORLD, &reqs[1]);
	MPI_Barrier(MPI_COMM_WORLD);
	et = clock();
	if (rank == 0) printf("Time taken by NonBlocking send/receive : %lf\n", (double)(et - st) / CLOCKS_PER_SEC);
	MPI_Finalize();
}
